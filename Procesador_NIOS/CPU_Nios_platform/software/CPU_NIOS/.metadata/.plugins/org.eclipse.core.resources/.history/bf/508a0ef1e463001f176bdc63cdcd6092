/*
 *
 * CPU_NIOS
 *
 */

#include <stdio.h>
#include <system.h>
#include <sys/alt_irq.h>
#include <altera_avalon_timer_regs.h>
#include <altera_avalon_pio_regs.h>

// Declaraci�n de funciones
void init_timer_interrupt(void);
static void timer_isr(void *context, alt_u32 id);
void check_buttons(void);
void setup(void);
void toggle_leds(void);
void display_seven_segments(int hours, int mins, int secs);
void alarm(void);

// Alarm global variables
// 0 : reloj
// 1 : set time
// 2 : reloj con alarma
// 3 : set alarm
// 4 : alarm
static int watch_state = 0;
static int last_watch_state = 0;

// Variables globales para horas, minutos, segundos
static int actual_hours = 12;
static int actual_minutes = 34;
static int actual_seconds = 0;
static int temp_hours = 0;
static int temp_minutes = 0;
static int temp_seconds = 0;
static int alarm_hours = 0;
static int alarm_minutes = 0;
static int alarm_seconds = 0;

// Variable para saber que se esta editando
static int setting_hours = 1;

// Variable para controlar el toggle de los leds
static int leds_interval = 0;

// Variable para el tiempo de la alarma
static int alarm_time_left = 30;

// Variables para el estado de los botones y switches
unsigned int actual_button_status = 0xf;
unsigned int actual_switch_status = 0x0;

int main(void) {

    //printf("Reloj Nios II con LED\n");

    // Habilita el timer
    init_timer_interrupt();

    // Bucle principal
    while (1);

    return 0;
}

void init_timer_interrupt(void) {

    // Registra la ISR con HAL
    alt_ic_isr_register(TIMER_INTERRUPTION_IRQ_INTERRUPT_CONTROLLER_ID,
    		TIMER_INTERRUPTION_IRQ,
                        (void *)timer_isr,
                        NULL,
                        0x0);

    // Inicia el timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_INTERRUPTION_BASE,
                                     ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
                                     ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void timer_isr(void *context, alt_u32 id) {

    // Borra la interrupci�n
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_INTERRUPTION_BASE, 0);

    // Imprime el estado actual y el pasado del reloj
    // ELIMINAR
    //printf("Last watch_state: %01d\n", last_watch_state);
    //printf("Actual watch_state: %01d\n", watch_state);

    // Incrementa los segundos
    actual_seconds++;

    // Si los segundos son 60, resetea a 0 y aumenta los minutos
    if (actual_seconds == 60) {
    	actual_seconds = 0;
    	actual_minutes++;
    }
    // Si los minutos son 60, resetea a 0 y aumenta las horas
    if (actual_minutes == 60) {
    	actual_minutes = 0;
    	actual_hours++;
    }
    // Si las horas son 24, resetea a 0
    if (actual_hours == 24) {
    	actual_hours = 0;
    }

    // Imprime la hora en formato HH:MM:SS
	// ELIMINAR
	//printf("Hora: %02d:%02d:%02d\n", actual_hours, actual_minutes, actual_seconds);
	//printf("Alarm: %02d:%02d:%02d\n", alarm_hours, alarm_minutes, alarm_seconds);
	//printf("Temp: %02d:%02d:%02d\n", temp_hours, temp_minutes, temp_seconds);

	// Verifica el estado de los botones
	check_buttons();

	// Controla los leds dependiendo del estado
	toggle_leds();

	// Check for alarm
	alarm();
}

void check_buttons(void) {

	// Leer el estado de los botones
	actual_button_status = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
	// Leer el estado de los switches
	actual_switch_status = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);

	// Si el reloj est� en estado = 0 (reloj)
	if (watch_state == 0 || watch_state == 2) {

		// Hace que aparezcan los digitos en los siete segmentos
		display_seven_segments(actual_hours, actual_minutes, actual_seconds);

		// Activa el primer switch ([0][0][0][0][0][0][0][0][0][1])
		if (actual_switch_status == 0x1) {
			// Guarda el ultimo estado del reloj
			last_watch_state = watch_state;
			// El reloj se pone en estado = 1 (set_time)
			watch_state = 1;

			temp_hours = actual_hours;
			temp_minutes = actual_minutes;
			temp_seconds = 0;
		}
		// Activa el segundo switch ([0][0][0][0][0][0][0][0][1][0])
		else if (actual_switch_status == 0x2) {
			// Guarda el ultimo estado del reloj
			last_watch_state = watch_state;
			// El reloj se pone en estado = 3 (set_alarm)
			watch_state = 3;

			temp_hours = actual_hours;
			temp_minutes = actual_minutes;
			temp_seconds = 0;
		}
	}

	// Si el reloj est� en estado = 1 (set_time)
	else if (watch_state == 1) {

		// Muestra el setup en el display
		setup();

		// CONFIRMACION CAMBIO DE HORA
		// Presiona el primer boton ([X][0][0][0])
		if (actual_button_status == 0x7) {

			//printf("NEW TIME SET\n");

			// El reloj vuelve al estado que estaba
			watch_state = last_watch_state;
			// Guarda el ultimo estado del reloj
			last_watch_state = 1;

			// Actualiza la hora actual
			actual_hours = temp_hours;
			actual_minutes = temp_minutes;
			actual_seconds = 0;
		}
		// CANCELACION CAMBIO DE HORA
		// Presiona los dos ultimos botones ([0][0][X][X])
		else if (actual_button_status == 0xc) {

			//printf("CANCELLED TIME SET\n");

			// El reloj vuelve al estado que estaba
			watch_state = last_watch_state;
			// Guarda el ultimo estado del reloj
			last_watch_state = 1;
		}
	}

	// Si el reloj est� en estado = 3 (set_alarm)
	else if (watch_state == 3) {

		// Muestra el setup en el display
		setup();

		// CONFIRMACION CAMBIO DE ALARMA
		// Presiona el primer bot�n ([X][0][0][0]) para confirmar
		if (actual_button_status == 0x7) {

			//printf("NEW ALARM SET\n");

			// Guarda el ultimo estado del reloj
			last_watch_state = 3;
			// El reloj se pone en estado = 2 (reloj con alarma)
			watch_state = 2;

			// Actualiza la hora de alarma
			alarm_hours = temp_hours;
			alarm_minutes = temp_minutes;
			alarm_seconds = 0;
		}
		// CANCELACION CAMBIO DE ALARMA
		// Presiona los dos ultimos botones ([0][0][X][X]) para cancelar
		else if (actual_button_status == 0xc) {

			//printf("CANCELLED ALARM SET\n");

			// Guarda el ultimo estado del reloj
			last_watch_state = 3;
			// El reloj vuelve al estado = 0 (reloj)
			watch_state = 0;
		}
	}
	// Si el reloj est� en estado = 4 (alarm)
	else if (watch_state == 4) {

		if (actual_button_status == 0x0 || alarm_time_left == 0) {

			//printf("ALARM TURNED OFF\n");

			// Guarda el ultimo estado del reloj
			last_watch_state = watch_state;
			// El reloj se pone en estado = 2 (reloj con alarma)
			watch_state = 0;
			// Retorna el tiempo de la alarma a 30
			alarm_time_left = 30;
			// APAGA EL BUZZER
			IOWR_ALTERA_AVALON_PIO_DATA(BUZZER_BASE, 0x0);
		}
	}

	//printf("Actual Button Status: 0x%02x\n", actual_button_status);
	//printf("Actual Switches Status: 0x%03x\n\n", actual_switch_status);
}

void setup(void){

	// Hace que aparezcan los digitos en los siete segmentos
	display_seven_segments(temp_hours, temp_minutes, temp_seconds);

	// Modificando los valores de la hora
	if (setting_hours) {
		// Presiona el tercer boton ([0][0][X][0]) para aumentar
		if (actual_button_status == 0xd) {
			temp_hours++;
			// Si las horas son 24, resetea a 0
			if (temp_hours == 24) {
				temp_hours = 0;
			}
		}
		// Presiona el cuarto boton ([0][0][0][X]) para disminuir
		else if (actual_button_status == 0xe) {
			temp_hours--;
			// Si las horas son -1, resetea a 23
			if (temp_hours == -1) {
				temp_hours = 23;
			}
		}
		// Presiona el segundo boton ([0][X][0][0]) para cambiar
		else if (actual_button_status == 0xb) {
			setting_hours = !setting_hours;
		}
	}
	// Modificando los valores de los minutos
	else if (!setting_hours) {
		// Presiona el tercer boton ([0][0][X][0]) para aumentar
		if (actual_button_status == 0xd) {
			temp_minutes++;
			// Si los minutos son 60, resetea a 0
			if (temp_minutes == 60) {
				temp_minutes = 0;
			}
		}
		// Presiona el cuarto boton ([0][0][0][X]) para disminuir
		else if (actual_button_status == 0xe) {
			temp_minutes--;
			// Si los minutos son -1, resetea a 59
			if (temp_minutes == -1) {
				temp_minutes = 59;
			}
		}
		// Presiona el segundo boton ([0][X][0][0]) para cambiar
		else if (actual_button_status == 0xb) {
			setting_hours = !setting_hours;
		}
	}
}

// Funci�n para controlar el estado del LED
void toggle_leds() {

	// Si el reloj est� en estado = 0 (reloj)
	if (watch_state == 0) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x200);  // Encender el ultimo LED [(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)]
    }
	// Si el reloj est� en estado = 1 (set_alarm)
	else if (watch_state == 1) {
		if (setting_hours){
			if (leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x201); // Encender LEDs cerca de la hora [(1)(0)(0)(0)(0)(0)(0)(0)(0)(1)]
			} else if (!leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x101); // Encender LEDs cerca de la hora [(0)(1)(0)(0)(0)(0)(0)(0)(0)(1)]
			}
		} else if (!setting_hours){
			if (leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x41); // Encender LEDs cerca de los mins [(0)(0)(0)(1)(0)(0)(0)(0)(0)(1)]
			} else if (!leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x21); // Encender LEDs cerca de los mins [(0)(0)(0)(0)(1)(0)(0)(0)(0)(1)]
			}
		}
		leds_interval = !leds_interval;
    }
	// Si el reloj est� en estado = 2 (reloj con alarma)
	else if (watch_state == 2) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x300);  // Encender los dos ultimos LEDs [(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)]
    }
	// Si el reloj est� en estado = 3 (set_alarm)
	else if (watch_state == 3) {
		if (setting_hours){
			if (leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x202); // Encender LEDs cerca de la hora [(1)(0)(0)(0)(0)(0)(0)(0)(1)(0)]
			} else if (!leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x102); // Encender LEDs cerca de la hora [(0)(1)(0)(0)(0)(0)(0)(0)(1)(0)]
			}
		} else if (!setting_hours){
			if (leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x42); // Encender LEDs cerca de los mins [(0)(0)(0)(1)(0)(0)(0)(0)(1)(0)]
			} else if (!leds_interval){
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x22); // Encender LEDs cerca de los mins [(0)(0)(0)(0)(1)(0)(0)(0)(1)(0)]
			}
		}
		leds_interval = !leds_interval;
    }
	// Si el reloj est� en estado = 4 (alarm)
	else if (watch_state == 4) {
		if (leds_interval){
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x2aa); // Encender LEDs para alarma [(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)]
		} else if (!leds_interval){
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x155); // Encender LEDs para alarma [(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)]
		}
		//leds_interval change se hace abajo en alarm()
    } else {
    	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x3ff);
    }
}

//
void alarm(void){
	if (watch_state == 2) {
		if (actual_seconds == 0 && actual_minutes == alarm_minutes && actual_hours == alarm_hours){
			watch_state = 4;
		}
	} else if (watch_state == 4) {
		// SUENA EL BUZZER
		//IOWR_ALTERA_AVALON_PIO_DATA(BUZZER_BASE, 0x1);
		playMelody();
        for (int i = 0; i < 500000; i++);

		// Flickers la hora
		if (leds_interval){
			display_seven_segments(actual_hours, actual_minutes, 0); // Encender LEDs para alarma [(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)]
		} else if (!leds_interval){
			display_seven_segments(-1, -1, -1); // Encender LEDs para alarma [(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)]
		}
		leds_interval = !leds_interval;

		// Deja que suene la alarma por un tiempo definido
		alarm_time_left--;
	}
}

#define NOTE_C4 262
#define NOTE_D4 294
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_G4 392
#define NOTE_A4 440
#define NOTE_B4 494
#define NOTE_C5 523
void playTone(int tone, int duration) {
    IOWR_32DIRECT(BUZZER_BASE, 0, tone);  // Activar el tono en el buzzer
    for (int i = 0; i < duration * 1000; i++);    // Retardo para la duración
    IOWR_32DIRECT(BUZZER_BASE, 0, 0);     // Desactivar el buzzer
    for (int i = 0; i < 1000; i++);               // Pausa entre tonos
}
void playMelody() {
    playTone(NOTE_C4, 500);  // Do
    playTone(NOTE_D4, 500);  // Re
    playTone(NOTE_E4, 500);  // Mi
    playTone(NOTE_F4, 500);  // Fa
    playTone(NOTE_G4, 500);  // Sol
    playTone(NOTE_A4, 500);  // La
    playTone(NOTE_B4, 500);  // Si
    playTone(NOTE_C5, 500);  // Do
}


// Tabla de b�squeda que mapee cada d�gito (0-9) a
// su correspondiente valor binario para controlar
// un display de 7 segmentos.
const alt_u8 segment_map[10] = {
    0xC0, // 0 -> 0x3F invertido
    0xF9, // 1 -> 0x06 invertido
    0xA4, // 2 -> 0x5B invertido
    0xB0, // 3 -> 0x4F invertido
    0x99, // 4 -> 0x66 invertido
    0x92, // 5 -> 0x6D invertido
    0x82, // 6 -> 0x7D invertido
    0xF8, // 7 -> 0x07 invertido
    0x80, // 8 -> 0x7F invertido
    0x90  // 9 -> 0x6F invertido
};

void display_seven_segments(int hours, int mins, int secs) {

	if (hours != -1) {
		// Trae de la tabla la combinacion para el siete segmentos
		alt_u8 sevseg_hour_tens  = segment_map[hours / 10];
		alt_u8 sevseg_hour_units = segment_map[hours % 10];
		alt_u8 sevseg_mins_tens  = segment_map[mins / 10];
		alt_u8 sevseg_mins_units = segment_map[mins % 10];
		alt_u8 sevseg_secs_tens  = segment_map[secs / 10];
		alt_u8 sevseg_secs_units = segment_map[secs % 10];

		// Escribe el registro en el hardware
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_HOURS_TENS_BASE, sevseg_hour_tens);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_HOURS_UNITS_BASE, sevseg_hour_units);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_MINS_TENS_BASE, sevseg_mins_tens);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_MINS_UNITS_BASE, sevseg_mins_units);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_SECS_TENS_BASE, sevseg_secs_tens);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_SECS_UNITS_BASE, sevseg_secs_units);
	} else {
		// Escribe el registro en el hardware
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_SECS_UNITS_BASE, 0x7F);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_SECS_TENS_BASE, 0x7F);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_MINS_UNITS_BASE, 0x7F);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_MINS_TENS_BASE, 0x7F);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_HOURS_UNITS_BASE, 0x7F);
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_HOURS_TENS_BASE, 0x7F);
	}
}
